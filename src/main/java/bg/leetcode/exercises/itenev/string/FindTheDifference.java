package bg.leetcode.exercises.itenev.string;

import java.util.HashMap;
import java.util.Map;

/**
 * Given two strings s and t which consist of only lowercase letters.
 * <p>
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 * <p>
 * Find the letter that was added in t.
 * <p>
 * Input:
 * s = "abcd"
 * t = "abcde"
 * Output: e
 * Explanation:
 * 'e' is the letter that was added.
 */
public class FindTheDifference {

    public char findTheDifference(String s, String t) {
        int[] sArr = new int[26];
        for (char ch : s.toCharArray()) {
            sArr[ch - 'a']++;
        }
        for (char ch : t.toCharArray()) {
            if (sArr[ch - 'a'] == 0) {
                return ch;
            } else {
                sArr[ch - 'a']--;
            }
        }
        return 0;
    }

    public char findTheDifference2(String s, String t) {
        Map<Character, Integer> map = new HashMap<>();

        for (char c : s.toCharArray())
            map.put(c, map.getOrDefault(c, 0) + 1);

        for (char c : t.toCharArray()) {
            if (!map.containsKey(c) || map.get(c) == 0)
                return c;
            else
                map.put(c, map.get(c) - 1);
        }

        return 0;
    }

    public char findTheDifference3(String s, String t) {
        int[] ch = new int[26];
        for (int i = 0; i < s.length(); i++) {
            ch[s.charAt(i) - 'a'] += 1;
            ch[t.charAt(i) - 'a'] -= 1;
        }
        ch[t.charAt(s.length()) - 'a'] -= 1;
        for (int i = 0; i < ch.length; i++) {
            if (ch[i] < 0) {
                return ((char) (i + 'a'));
            }
        }
        return 0;
    }

    public char findTheDifferenceBitManipulation(String s, String t) {
        int res = 0;

        for (int i = 0; i < s.length(); i++)
            res ^= s.charAt(i);

        for (int i = 0; i < t.length(); i++)
            res ^= t.charAt(i);

        return (char) res;
    }
}
